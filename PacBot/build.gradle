plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2020.2.2"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamOrDefault(1337)
        }
    }
    artifacts {
        frcNativeArtifact('frcCpp') {
            targets << "roborio"
            component = 'frcUserProgram'
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        // {
            // The directory below is the local directory to deploy
            //files = fileTree(dir: 'config/9718-Clyde')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            //targets << "roborio"
            //directory = '/robot/config'
        //}
    }
}


// Set this to true to include the src folder in the include directories passed
// to the compiler. Some eclipse project imports depend on this behavior.
// We recommend leaving this disabled if possible. Note for eclipse project
// imports this is enabled by default. For new projects, its disabled
def includeSrcInIncludeRoot = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false


model {
    components {

          gsi(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir '../gsi/src/'
                    exclude '**/*.swp'

            }
                exportedHeaders {
                    srcDir '../gsi/include'
                }
            }

        }
         gsu(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir '../gsu/src'
                    exclude '**/*.swp'
                }
                exportedHeaders {
                    srcDir '../gsu/include'
                    srcDir '../gsi/include'
                }
            }
        }

         RobonautsControls(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir '../RobonautsControls/src'
                    exclude '**/*.swp'
                }
                exportedHeaders {
                    srcDir '../RobonautsControls/include'
                    srcDir '../gsu/include'
                    srcDir '../gsi/include'
                    srcDir '../RobonautsLibrary/include'
                }
            }
            wpi.deps.wpilib(it)
            wpi.deps.vendor.cpp(it)

        }
		
         RobonautsLibrary(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir '../RobonautsLibrary/src'
                    exclude '**/*.swp'
                }
                exportedHeaders {
                    srcDir '../RobonautsLibrary/include'
                    srcDir '../gsi/include'
                    srcDir '../gsu/include'
                    srcDir '../RobonautsLibrary/include'
                }
            }
            wpi.deps.wpilib(it)
            wpi.deps.vendor.cpp(it)
        } 

        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'src'
                    include '**/*.cpp', '**/*.cc'
                    exclude '**/*.swp'
                }
                exportedHeaders {
                    srcDir '../RobonautsControls/include'
                    srcDir 'include'
                    srcDir '../gsi/include'
                    srcDir '../gsu/include'
                    srcDir '../RobonautsLibrary/include'
                    if (includeSrcInIncludeRoot) {
                        srcDir 'src'
                    }
                }
            }

            binaries.all 
            {
                cppCompiler.args('-g')
                lib library: 'RobonautsControls', linkage: 'static'   
                lib library: 'RobonautsLibrary', linkage: 'static'   
                lib library: 'gsu', linkage: 'static'   
                lib library: 'gsi', linkage: 'static'   
            }
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.deps.wpilib(it)
            wpi.deps.vendor.cpp(it)


        }
       
    }
}

